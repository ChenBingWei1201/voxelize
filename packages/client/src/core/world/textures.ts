import {
  CanvasTexture,
  ClampToEdgeWrapping,
  Color,
  NearestFilter,
  Texture,
  sRGBEncoding,
} from "three";

export type TextureRange = {
  startU: number;
  endU: number;
  startV: number;
  endV: number;
};

/**
 * A texture atlas is a collection of textures that are packed into a single texture.
 * This is useful for reducing the number of draw calls required to render a scene, since
 * all block textures can be rendered with a single draw call.
 *
 * By default, the texture atlas creates an additional border around each texture to prevent
 * texture bleeding.
 *
 * ![Texture bleeding](/img/docs/texture-bleeding.png)
 *
 */
export class AtlasTexture extends CanvasTexture {
  public countPerSide: number;

  public dimension: number;

  /**
   * The canvas that is used to generate the texture this.
   */
  public canvas: HTMLCanvasElement;

  /**
   * The margin between each block texture in the this.
   */
  public atlasMargin = 0;

  /**
   * The offset of each block's texture to the end of its border.
   */
  public atlasOffset = 0;

  /**
   * The ratio of the texture on the atlas to the original texture.
   */
  public atlasRatio = 0;

  /**
   * Create a new texture this.
   *
   * @param textureMap A map that points a side name to a texture or color.
   * @param ranges The ranges on the texture atlas generated by the server.
   * @param params The parameters used to create the texture this.
   * @returns The texture atlas generated.
   */
  constructor(
    countPerSide: number,
    dimension: number,
    canvas = document.createElement("canvas")
  ) {
    super(canvas);

    this.canvas = canvas;

    this.countPerSide = countPerSide;
    this.dimension = dimension;

    if (countPerSide === 1) {
      this.atlasOffset = 0;
      this.atlasRatio = 1;
      this.atlasMargin = 0;
    } else {
      this.atlasOffset = 1 / (countPerSide * 4);

      this.atlasMargin = 1;
      this.atlasRatio =
        (this.atlasMargin / this.atlasOffset / countPerSide -
          2 * this.atlasMargin) /
        dimension;

      while (this.atlasRatio !== Math.floor(this.atlasRatio)) {
        this.atlasRatio *= 2;
        this.atlasMargin *= 2;
      }
    }

    const canvasWidth =
      (dimension * this.atlasRatio + this.atlasMargin * 2) * countPerSide;
    const canvasHeight =
      (dimension * this.atlasRatio + this.atlasMargin * 2) * countPerSide;
    this.canvas.width = canvasWidth;
    this.canvas.height = canvasHeight;

    const context = this.canvas.getContext("2d");
    context.imageSmoothingEnabled = false;

    this.makeCanvasPowerOfTwo(this.canvas);
    this.wrapS = ClampToEdgeWrapping;
    this.wrapT = ClampToEdgeWrapping;
    this.minFilter = NearestFilter;
    this.magFilter = NearestFilter;
    this.generateMipmaps = false;
    this.needsUpdate = true;
    this.encoding = sRGBEncoding;

    const unknown = AtlasTexture.makeUnknownImage(canvasWidth / countPerSide);

    for (let x = 0; x < countPerSide; x++) {
      for (let y = 0; y < countPerSide; y++) {
        context.drawImage(
          unknown,
          (x / countPerSide) * canvasWidth,
          (y / countPerSide) * canvasHeight,
          canvasWidth / countPerSide,
          canvasHeight / countPerSide
        );
      }
    }
  }

  /**
   * Draw a texture to a range on the texture atlas.
   *
   * @param range The range on the texture atlas to draw the texture to.
   * @param image The texture to draw to the range.
   */
  drawImageToRange(
    range: TextureRange,
    image:
      | typeof Image
      | HTMLImageElement
      | HTMLCanvasElement
      | Color
      | Texture,
    clearRect = true,
    opacity = 1.0
  ) {
    const { startU, endV } = range;

    const image2 =
      image instanceof Texture
        ? image.image
        : (image as any as HTMLImageElement);

    if (!image2) {
      return;
    }

    const context = this.canvas.getContext("2d");

    context.save();

    const canvasWidth = this.canvas.width;
    const canvasHeight = this.canvas.height;

    context.globalAlpha = opacity;

    if (opacity !== 1) context.globalCompositeOperation = "lighter";

    if (clearRect) {
      context.clearRect(
        (startU - this.atlasOffset) * canvasWidth,
        (1 - endV - this.atlasOffset) * canvasHeight,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin
      );
    }

    if ((image as any as Color).isColor) {
      context.fillStyle = `#${(image as any).getHexString()}`;
      context.fillRect(
        (startU - this.atlasOffset) * canvasWidth,
        (1 - endV - this.atlasOffset) * canvasHeight,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin
      );

      return;
    }

    // Draw a background first.

    if (clearRect) {
      context.drawImage(
        image2,
        (startU - this.atlasOffset) * canvasWidth,
        (1 - endV - this.atlasOffset) * canvasHeight,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin,
        this.dimension * this.atlasRatio + 2 * this.atlasMargin
      );

      // Carve out the middle.
      context.clearRect(
        (startU - this.atlasOffset) * canvasWidth + this.atlasMargin,
        (1 - endV - this.atlasOffset) * canvasHeight + this.atlasMargin,
        this.dimension * this.atlasRatio,
        this.dimension * this.atlasRatio
      );
    }

    // Draw the actual texture.
    context.drawImage(
      image2,
      (startU - this.atlasOffset) * canvasWidth + this.atlasMargin,
      (1 - endV - this.atlasOffset) * canvasHeight + this.atlasMargin,
      this.dimension * this.atlasRatio,
      this.dimension * this.atlasRatio
    );

    context.restore();
  }

  private makeCanvasPowerOfTwo(canvas?: HTMLCanvasElement | undefined) {
    let setCanvas = false;
    if (!canvas) {
      canvas = this.canvas;
      setCanvas = true;
    }
    const oldWidth = canvas.width;
    const oldHeight = canvas.height;
    const newWidth = Math.pow(2, Math.round(Math.log(oldWidth) / Math.log(2)));
    const newHeight = Math.pow(
      2,
      Math.round(Math.log(oldHeight) / Math.log(2))
    );
    const newCanvas = document.createElement("canvas");
    newCanvas.width = newWidth;
    newCanvas.height = newHeight;
    newCanvas.getContext("2d")?.drawImage(canvas, 0, 0, newWidth, newHeight);
    if (setCanvas) {
      this.canvas = newCanvas;
    }
  }

  static makeUnknownImage(
    dimension: number,
    color1 = "#0A2647",
    color2 = "#E1D7C6"
  ) {
    const canvas = document.createElement("canvas") as HTMLCanvasElement;
    const context = canvas.getContext("2d");

    context.imageSmoothingEnabled = false;
    context.canvas.width = dimension;
    context.canvas.height = dimension;

    context.fillStyle = color2;
    context.fillRect(0, 0, dimension, dimension);
    context.fillStyle = color1;
    context.textAlign = "center";
    context.textBaseline = "middle";
    context.fillText("?", dimension / 2, dimension / 2, dimension);

    return canvas;
  }

  static makeUnknownTexture(dimension: number) {
    const texture = new CanvasTexture(AtlasTexture.makeUnknownImage(dimension));

    texture.minFilter = NearestFilter;
    texture.magFilter = NearestFilter;
    texture.generateMipmaps = false;
    texture.needsUpdate = true;
    texture.encoding = sRGBEncoding;

    return texture;
  }
}

export class AnimatedTexture {}
